{"version":3,"sources":["components/nav/Nav.js","pages/Home.js","pages/About.js","pages/Contact.js","pages/Projects.js","App.js","serviceWorker.js","index.js"],"names":["Styles","styled","div","NavigationBar","Navbar","expand","Brand","className","href","Toggle","aria-controls","Collapse","id","Nav","to","exact","activeClassName","target","rel","GridWrapper","Home","props","Jumbotron","fluid","Container","left","cursor","hideWhenDone","Delay","ms","Backspace","count","delay","right","bottom","activeClass","spy","smooth","offset","duration","Button","color","size","About","Contact","Projects","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8460379a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport \"../../styles/Nav.css\";\r\n\r\nconst Styles = styled.div`\r\n  .navbar {\r\n    background-color: #222;\r\n  }\r\n  a,\r\n  .navbar-nav,\r\n  .navbar-light .nav-link {\r\n    color: #add8e6;\r\n    &:hover {\r\n      color: white;\r\n    }\r\n  }\r\n  .navbar-brand {\r\n    font-size: 1.4em;\r\n    color: #add8e6;\r\n    &:hover {\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"md\">\r\n      <Navbar.Brand className=\"navbrand\" href=\"/\">\r\n        E.M.\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <NavLink\r\n            to=\"/\"\r\n            exact\r\n            className=\"p-2\"\r\n            activeClassName=\"navbar__link--active\"\r\n          >\r\n            Home\r\n          </NavLink>\r\n          <NavLink\r\n            to=\"/about\"\r\n            className=\"p-2\"\r\n            activeClassName=\"navbar__link--active\"\r\n          >\r\n            About\r\n          </NavLink>\r\n          <NavLink\r\n            to=\"/projects\"\r\n            className=\"p-2\"\r\n            activeClassName=\"navbar__link--active\"\r\n          >\r\n            Projects\r\n          </NavLink>\r\n          <NavLink\r\n            to=\"/contact\"\r\n            className=\"p-2\"\r\n            activeClassName=\"navbar__link--active\"\r\n          >\r\n            Contact\r\n          </NavLink>\r\n        </Nav>\r\n        <a\r\n          href=\"https://erikmoxley.wordpress.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"p-2\"\r\n        >\r\n          WordPress\r\n        </a>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Jumbotron, Container, Button } from \"reactstrap\";\r\nimport Fade from \"react-reveal/Fade\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Typist from \"react-typist\";\r\nimport \"../styles/Home.css\";\r\n\r\nconst GridWrapper = styled.div``;\r\nexport const Home = props => (\r\n  <GridWrapper>\r\n    <div id=\"top\">\r\n      <Jumbotron className=\"jumbotron\" fluid>\r\n        <Container className=\"container\" fluid>\r\n          <Fade left>\r\n            <div className=\"Typist\">\r\n              <Typist className=\"hero\" cursor={{ hideWhenDone: true }}>\r\n                Hello, I'm\r\n                <Typist.Delay ms={100} />\r\n                <span className=\"eMox\">\r\n                  Eric K.\r\n                  <Typist.Backspace count={4} delay={1000} />\r\n                  <Typist.Delay ms={750} />k Moxley.\r\n                  <Typist.Delay ms={6590} />\r\n                </span>\r\n              </Typist>\r\n            </div>\r\n          </Fade>\r\n          <Fade right>\r\n            <div className=\"Typist\">\r\n              <Typist className=\"hero\" cursor={{ hideWhenDone: true }}>\r\n                Former Store Manager.\r\n                <Typist.Delay ms={1000} />\r\n                <Typist.Backspace count={21} delay={500} />\r\n                Aspiring Software Engineer.\r\n                <Typist.Delay ms={500} />\r\n                <Typist.Backspace count={18} delay={500} />\r\n                <Typist.Delay ms={1000} />\r\n                Web Developer.\r\n              </Typist>\r\n            </div>\r\n          </Fade>\r\n          <p className=\"lead\">\r\n            <Fade bottom>\r\n              <NavLink\r\n                activeClass=\"active\"\r\n                to=\"/about\"\r\n                spy={true}\r\n                smooth={true}\r\n                offset={-70}\r\n                duration={400}\r\n              >\r\n                <Button color=\"secondary\" size=\"md\">\r\n                  Find Out More\r\n                </Button>\r\n              </NavLink>\r\n            </Fade>\r\n          </p>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div>\r\n  </GridWrapper>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst GridWrapper = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  margin-top: 1em;\r\n  margin-left: 1em;\r\n  margin-right: 6em;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-auto-rows: minmax(25px, auto);\r\n`;\r\nexport const About = () => (\r\n  <GridWrapper>\r\n    <h2>About Page</h2>\r\n    <p>\r\n      State at ceiling lay on arms while you're using the keyboard so this human\r\n      feeds me.\r\n    </p>\r\n    <p>I am a kitty cat, sup, feed me, no cares in the world</p>\r\n    <p>Meow meow, I tell my human purr for no reason but to chase after</p>\r\n  </GridWrapper>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst GridWrapper = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  margin-top: 1em;\r\n  margin-left: 1em;\r\n  margin-right: 6em;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-auto-rows: minmax(25px, auto);\r\n`;\r\nexport const Contact = props => (\r\n  <GridWrapper>\r\n    <h1>Contact Me</h1>\r\n  </GridWrapper>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst GridWrapper = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  margin-top: 1em;\r\n  margin-left: 1em;\r\n  margin-right: 6em;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-auto-rows: minmax(25px, auto);\r\n`;\r\nexport const Projects = props => (\r\n  <GridWrapper>\r\n    <h1>Projects Page</h1>\r\n  </GridWrapper>\r\n);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { NavigationBar } from \"./components/nav/Nav\";\nimport { Home } from \"./pages/Home\";\nimport { About } from \"./pages/About\";\nimport { Contact } from \"./pages/Contact\";\nimport { Projects } from \"./pages/Projects\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"container\">\n        <NavigationBar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/projects\" component={Projects} />\n          <Route path=\"/contact\" component={Contact} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}